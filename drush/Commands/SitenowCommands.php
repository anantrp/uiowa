<?php

namespace Drush\Commands;

use Drush\Drush;
use Consolidation\AnnotatedCommand\AnnotationData;
use Consolidation\AnnotatedCommand\CommandData;
use Consolidation\OutputFormatters\StructuredData\PropertyList;
use Consolidation\SiteAlias\SiteAliasManagerAwareInterface;
use Consolidation\SiteAlias\SiteAliasManagerAwareTrait;
use Symfony\Component\Console\Input\InputInterface;

/**
 * General policy commands and hooks for the application.
 */
class SitenowCommands extends DrushCommands implements SiteAliasManagerAwareInterface {
  use SiteAliasManagerAwareTrait;

  /**
   * Overwrite the sites.local.php file prior to starting the server.
   *
   * @hook pre-command runserver
   */
  public function preRunserver(CommandData $commandData) {
    $uri = $commandData->input()->getOption('uri');

    $data = <<<EOD
<?php
/**
 * @file
 * Automatically generated by PolicyCommands.
 */
 
\$sites['8888.localhost'] = '$uri';
EOD;

    if ($uri) {
      file_put_contents(DRUPAL_ROOT . '/sites/sites.local.php', $data);
      $this->logger()->notice(dt('Overwrote sites.local.php to route @uri site.', [
        '@uri' => $uri,
      ]));
    }
    else {
      file_put_contents(DRUPAL_ROOT . '/sites/sites.local.php', "<?php\n");
      $this->logger()->notice(dt('Overwrote sites.local.php to route default site.'));
    }
  }

  /**
   * Add database size to status command output.
   *
   * @param \Consolidation\OutputFormatters\StructuredData\PropertyList $result
   *   The command result.
   * @param \Consolidation\AnnotatedCommand\CommandData $commandData
   *   The command data.
   *
   * @hook alter core:status
   *
   * @return result
   *   The altered command result.
   */
  public function alterStatus(PropertyList $result, CommandData $commandData) {
    if ($result['bootstrap'] == 'Successful') {
      $db = $result['db-name'];
      $selfRecord = $this->siteAliasManager()->getSelf();
      $args = ["SELECT SUM(ROUND(((data_length + index_length) / 1024 / 1024), 2)) AS \"Size\" FROM information_schema.TABLES WHERE table_schema = \"$db\";"];
      $options = ['yes' => TRUE];
      $process = $this->processManager()->drush($selfRecord, 'sql:query', $args, $options);
      $process->mustRun();
      $output = trim($process->getOutput());
      $result['db-size'] = $output . "MB";
      return $result;
    }
  }

  /**
   * Add the DB size field label to the status command annotation data.
   *
   * @hook init core:status
   */
  public function initStatus(InputInterface $input, AnnotationData $annotationData) {
    $annotationData->append('field-labels', "\n" . " db-size: DB Size");
    $defaults = $annotationData->getList('default-fields');
    $key = array_search('db-name', $defaults);
    array_splice($defaults, $key, 0, 'db-size');
    $annotationData->set('default-fields', $defaults);
    $input->setOption('fields', $defaults);
  }

}
