<?php

/**
 * @file
 * Contains sitenow_p2lb.module.
 */

use Drupal\Core\Database\Database;
use Drupal\layout_builder\Section;

/**
 * Check for nodes which are using paragraphs.
 */
function sitenow_p2lb_paragraph_nodes() {
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['parent_id'])
    ->condition('parent_type', 'node', '=');
  $result = $query->distinct()
    ->execute()
    ->fetchCol();
  // @todo Paragraphs used for lb collections need to be filtered out.
  return $result;
}

/**
 * Convert a node from paragraphs to layout builder.
 */
function sitenow_p2lb_node_p2lb($nid) {
  $node = \Drupal::service('entity_type.manager')
    ->getStorage('node')
    ->load($nid);
  // Get sections from the page.
  $section_ids = sitenow_p2lb_fetch_sections($nid);
  $layout = $node->get('layout_builder__layout');
  foreach ($section_ids as $section_id) {
    sitenow_p2lb_process_section($section_id, $layout);
  }
  $layout->save();
}

/**
 * Fetch all section paragraph ids attached to a node.
 */
function sitenow_p2lb_fetch_section_ids($nid) {
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['id'])
    ->condition('parent_type', 'node', '=')
    ->condition('parent_id', $nid, '=');
  $section_ids = $query->distinct()
    ->execute()
    ->fetchCol();
  return $section_ids;
}

/**
 * Process paragraphs section.
 */
function sitenow_p2lb_process_section($section_id, $layout) {
  $para_storage = \Drupal::service('entity_type.manager')
    ->getStorage('paragraph');

  // Grab section title.
  $section_object = $para_storage->load($section_id);
  $section_title = $section_object->get('field_section_title')[0]
    ->getValue()['value'];

  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['id', 'type'])
    ->condition('parent_id', $section_id, '=')
    ->condition('parent_field_name', 'field_section_content_block', '=');
  $pids = $query->execute()->fetchAll();

  $col_widths = [];
  $p2b_ids = [];
  $paragraphs = $para_storage->loadMultiple($pids);
  foreach ($paragraphs as $paragraph) {
    $col_str = $paragraph->get('field_uip_colwidth')->getString();
    // 'Fluid' paragraph will be a col_width of 0.
    $col_widths[] = (int) preg_replace('|[^0-9]|', '', $col_str);
    $p2b_ids[] = sitenow_p2lb_process_paragraph($paragraph);
  }

  $sections = sitenow_p2lb_determine_columns($col_widths);

  foreach ($sections as $section_info) {
    // Create and append section to our $layout (section list).
    $w2d = [1 => 'one', 2 => 'two', 3 => 'three', 4 => 'four'];
    $layout_id = 'layout_'
      . $w2d[$section_info['num_columns']]
      . 'col';
    $layout_settings = [
      'label' => $section_title,
      'column_widths' => sitenow_p2lb_determine_columns($section_info['col_widths']),
      'layout_builder_styles_style' => [],
    ];
    $layout->appendSection(
      sitenow_p2lb_create_section($layout_id, $layout_settings)
    )
      ->save();
  }
  return;
}

/**
 * Process individual paragraph.
 */
function sitenow_p2lb_process_paragraph($paragraph) {
  switch ($paragraph->get('type')->getString()) {
    case 'section':
      break;

    case 'text':
      // @todo This needs to be checked/extended/cleaned up
      $block = \Drupal::entityTypeManager()
        ->getStorage('block_content')
        ->create([
          'type' => 'uiowa_text_area',
          'langcode' => 'en',
          'status' => $paragraph->get('status')->getString(),
          // info- looks like 'title' field?
          'reusable' => 0,
          'default_langcode' => 1,
          'field_uiowa_text_area' => [
            'value' => $paragraph->get('field_text_body')[0]->get('value')->getString(),
            'format' => $paragraph->get('field_text_body')[0]->get('format')->getString(),
          ],
        ]);

      if ($block->save()) {
        return $block->get('id')->getString();
      }
      break;

    case 'accordion':
    case 'accordion_item':
    case 'blockquote':
    case 'card':
    case 'image_gallery':
    case 'webform':
    case 'featured_content':
    case 'carousel':
    case 'carousel_image':
    default:

  }
  // No block was successfully created.
  return 0;
}

/**
 * Removes all attached paragraphs from a node.
 */
function sitenow_p2lb_remove_attached_paragraphs($nid) {
  $section_ids = sitenow_p2lb_fetch_section_ids($nid);
  // Grab paragraphs attached to each of the given sections.
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['id'])
    ->condition('parent_id', $section_ids, 'in')
    ->condition('parent_field_name', 'field_section_content_block', '=');
  $child_ids = $query->execute()->fetchCol();
  $ids = array_merge($child_ids, $section_ids);
  $paragraphs = \Drupal::service('entity_type.manager')
    ->getStorage('paragraph')
    ->loadMultiple($ids);
  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }
}

/**
 * Determine section layout_id.
 */
function sitenow_p2lb_determine_columns($col_widths) {
  // Check if we wrap into additional sections.
  $total_col_width = array_sum($col_widths);
  if ($total_col_width <= 12) {
    // Check for 'fluid' paragraphs, and set appropriately.
    $fluid_indices = array_keys($col_widths, 0, TRUE);
    if (!empty($fluid_indices)) {
      $repl = (12 - $total_col_width) / count($fluid_indices);
      // Roundoff to a valid repl value.
      if ($repl <= 3) {
        $repl = 3;
      }
      elseif ($repl <= 4) {
        $repl = 4;
      }
      elseif ($repl <= 6) {
        $repl = 6;
      }
      elseif ($repl <= 8) {
        $repl = 8;
      }
      elseif ($repl <= 9) {
        $repl = 9;
      }
      else {
        $repl = 12;
      }
      foreach ($fluid_indices as $index) {
        $col_widths[$index] = $repl;
      }
      return sitenow_p2lb_determine_columns($col_widths);
    }
    return [[
      'num_columns' => count(),
      'col_widths' => $col_widths,
    ]];
  }
  $sections = [];
  $iter_adder = 0;
  $i = 0;
  $counter = 100;
  while (TRUE) {
    $iter_adder += $col_widths[$i];
    if ($iter_adder > 12) {
      $sections[] = sitenow_p2lb_determine_columns(
        array_slice($col_widths, $i)
      );
      $iter_adder = 0;
    }
    if ($i == count($col_widths) - 1) {
      $sections[] = sitenow_p2lb_determine_columns(
        array_slice($col_widths, $i)
      );
      break;
    }
    // Extra check to break loop.
    if ($counter-- <= 0) {
      break;
    }
    $i++;
  }
  return $sections;
}

/**
 * Create a section.
 */
function sitenow_p2lb_create_section($layout_id, $layout_settings) {
  $section_array = [
    'layout_id' => $layout_id,
    'components' => [],
    'layout_settings' => $layout_settings,
  ];
  $section = Section::fromArray($section_array);
  return $section;
}

/**
 * Choose multi-col column settings.
 */
function sitenow_p2lb_multicol_settings($col_widths) {
  $settings = '';
  switch (count($col_widths)) {
    case 2:
      $options = [
        3 => '25-75',
        4 => '33-67',
        6 => '50-50',
        8 => '67-33',
        9 => '75-25',
      ];
      $picker = $col_widths[0];
      if (in_array($picker, $options)) {
        $settings = $options[$picker];
      }
      else {
        $settings = $options[6];
      }
      break;

    case 3:
      if ($col_widths[0] == 6) {
        $settings = '50-25-25';
      }
      elseif ($col_widths[0] == 3) {
        if ($col_widths[1] == 3) {
          $settings = '25-25-50';
        }
        else {
          $settings = '25-50-25';
        }
      }
      else {
        $settings = '33-34-33';
      }
      break;

    case 1:
    case 4:
    default:
      break;
  }
  return $settings;
}
