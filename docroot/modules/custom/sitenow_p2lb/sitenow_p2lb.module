<?php

/**
 * @file
 * Contains sitenow_p2lb.module.
 */

use Drupal\Core\Database\Database;

/**
 * Check for nodes which are using paragraphs.
 */
function sitenow_p2lb_paragraph_nodes() {
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['parent_id'])
    ->condition('parent_type', 'node', '=');
  $result = $query->distinct()
    ->execute()
    ->fetchCol();
  // @todo All pages will have default section/body combo currently.
  return $result;
}

/**
 * Convert a node from paragraphs to layout builder.
 */
function sitenow_p2lb_node_p2lb($nid) {
  $node = \Drupal::service('entity_type.manager')
    ->getStorage('node')
    ->load($nid);
  // Get sections from the page.
  $section_ids = sitenow_p2lb_fetch_sections($nid);
  $layout = $node->get('layout_builder__layout');
  foreach ($section_ids as $section_id) {
    sitenow_p2lb_process_section($section_id, $layout);
  }
  $layout->save();
}

/**
 * Fetch all section paragraph ids attached to a node.
 */
function sitenow_p2lb_fetch_section_ids($nid) {
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['id'])
    ->condition('parent_type', 'node', '=')
    ->condition('parent_id', $nid, '=');
  $section_ids = $query->distinct()
    ->execute()
    ->fetchCol();
  return $section_ids;
}

/**
 * Process paragraphs section.
 */
function sitenow_p2lb_process_section($section_id, $layout) {
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['id', 'type'])
    ->condition('parent_id', $section_id, '=')
    ->condition('parent_field_name', 'field_section_content_block', '=');
  $pids = $query->execute()->fetchAll();
  $col_widths = [];
  $p2b_ids = [];
  $paragraphs = \Drupal::service('entity_type.manager')
    ->getStorage('paragraph')
    ->loadMultiple($pids);
  foreach ($paragraphs as $paragraph) {
    $col_str = $paragraph->get('field_uip_colwidth')->getString();
    // 'Fluid' paragraph will be a col_width of 0.
    $col_widths[] = (int) preg_replace('|[^0-9]|', '', $col_str);
    $p2b_ids[] = sitenow_p2lb_process_paragraph($paragraph);
  }
  // Check if we wrap into additional sections.
  $total_col_width = array_sum($col_widths);
  $num_sections = ceil($total_col_width / 12);
  for ($i = 0; $i < $num_sections; $i++) {
    // Create and append section to our $layout (section list).
  }
  return;
}

/**
 * Process individual paragraph.
 */
function sitenow_p2lb_process_paragraph($paragraph) {
  switch ($paragraph->get('type')->getString()) {
    case 'section':
      break;

    case 'text':
      // @todo This needs to be checked/extended/cleaned up
      $block = \Drupal::entityTypeManager()
        ->getStorage('block_content')
        ->create([
          'type' => 'uiowa_text_area',
          'langcode' => 'en',
          'status' => $paragraph->get('status')->getString(),
          // info- looks like 'title' field?
          'reusable' => 0,
          'default_langcode' => 1,
          'field_uiowa_text_area' => [
            'value' => $paragraph->get('field_text_body')[0]->get('value')->getString(),
            'format' => $paragraph->get('field_text_body')[0]->get('format')->getString(),
          ],
        ]);

      if ($block->save()) {
        return $block->get('id')->getString();
      }
      break;

    case 'accordion':
    case 'accordion_item':
    case 'blockquote':
    case 'card':
    case 'image_gallery':
    case 'webform':
    case 'featured_content':
    case 'carousel':
    case 'carousel_image':
    default:

  }
  // No block was successfully created.
  return 0;
}

/**
 * Removes all attached paragraphs from a node.
 */
function sitenow_p2lb_remove_attached_paragraphs($nid) {
  $section_ids = sitenow_p2lb_fetch_section_ids($nid);
  // Grab paragraphs attached to each of the given sections.
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['id'])
    ->condition('parent_id', $section_ids, 'in')
    ->condition('parent_field_name', 'field_section_content_block', '=');
  $child_ids = $query->execute()->fetchCol();
  $ids = array_merge($child_ids, $section_ids);
  $paragraphs = \Drupal::service('entity_type.manager')
    ->getStorage('paragraph')
    ->loadMultiple($ids);
  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }
}
