<?php

/**
 * @file
 * Contains sitenow_p2lb.module.
 */

use Drupal\Core\Database\Database;
use Drupal\layout_builder\Section;
use Drupal\layout_builder\InlineBlockUsage;

/**
 * Check for nodes which are using paragraphs.
 */
function sitenow_p2lb_paragraph_nodes() {
  // @todo This grabs nodes that have old deleted ref sections.
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['parent_id'])
    ->condition('parent_type', 'node', '=');
  $result = $query->distinct()
    ->execute()
    ->fetchCol();
  // @todo Paragraphs used for lb collections need to be filtered out.
  return $result;
}

/**
 * Convert a node from paragraphs to layout builder.
 *
 * @param int $nid
 *   Id for the node that should be processed.
 * @param bool $remove
 *   Indicator whether old paragraphs should be removed following processing.
 */
function sitenow_p2lb_node_p2lb($nid, $remove = FALSE) {
  $node = \Drupal::service('entity_type.manager')
    ->getStorage('node')
    ->load($nid);
  if (!$node) {
    return FALSE;
  }
  // Get sections from the page.
  $section_ids = sitenow_p2lb_fetch_child_ids($node);
  $layout = $node->get('layout_builder__layout');

  foreach ($section_ids as $section_id) {
    $layout = sitenow_p2lb_process_section($section_id, $layout, $node);
  }

  // Need to set with an array of sections, retrieved with getSections().
  if ($layout) {
    $node->set('layout_builder__layout', $layout->getSections())
      ->save();

    // Remove the attached paragraphs from the node.
    if ($remove) {
      sitenow_p2lb_remove_attached_paragraphs($nid);
    }
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Fetch all section paragraph ids attached to a node.
 */
function sitenow_p2lb_fetch_child_ids($parent) {
  if (!$parent) {
    return [];
  }
  switch ($parent->getType()) {
    case 'page':
      $field = 'field_page_content_block';
      break;

    case 'section':
      $field = 'field_section_content_block';
      break;

    default:
      return [];
  }

  $ids = [];
  $content = $parent->get($field);
  if (!is_null($content)) {
    foreach ($content as $content_ref) {
      $ids[] = $content_ref->getValue()['target_id'];
    }
  }
  return $ids;
}

/**
 * Process paragraphs section.
 */
function sitenow_p2lb_process_section($section_id, $layout, $node) {
  $para_storage = \Drupal::service('entity_type.manager')
    ->getStorage('paragraph');
  $section_object = $para_storage->load($section_id);
  if (!$section_object) {
    return FALSE;
  }

  // Grab section title and styles.
  $section_title = ($section_object->get('field_section_title')[0]) ?
    $section_object->get('field_section_title')[0]->getValue()['value'] : '';
  $section_styles = sitenow_p2lb_section_styles($section_object);

  // Get all paragraphs attached to this section.
  $pids = sitenow_p2lb_fetch_child_ids($section_object);
  $paragraphs = $para_storage->loadMultiple($pids);

  // Check for a section image, and if so, handle it.
  $section_image_fid = ($section_object->get('field_section_image')[0]) ?
    $section_object->get('field_section_image')[0]->getValue()['target_id'] : 0;
  $banner_text = NULL;

  if ($section_image_fid) {
    // If the first (or only) paragraph is text, use it for the created banner.
    if (!empty($paragraphs) && reset($paragraphs)->getType() === 'text') {
      $banner_text = array_shift($paragraphs);
    }

    // Append our new background image section.
    $section_array = sitenow_p2lb_section_image($section_image_fid, $banner_text, $node);
    if (!empty($section_array)) {
      $section = Section::fromArray($section_array);
      $layout->appendSection($section);
      // If that was the only paragraph, we're done with this p_section.
      if (empty($paragraphs)) {
        return $layout;
      }
    }
  }

  // Widths are set at the paragraph level. Grab our column widths.
  $col_widths = [];
  foreach ($paragraphs as $paragraph) {
    $col_str = $paragraph->get('field_uip_colwidth')->getString();
    // 'Fluid' paragraph will be a col_width of 0.
    $col_widths[] = (int) preg_replace('|[^0-9]|', '', $col_str);
  }

  $sections_infos = sitenow_p2lb_determine_columns($col_widths);

  // Helpers for iterating through paragraphs later.
  $paragraph_iter = 0;
  $paragraph_keys = array_keys($paragraphs);

  // Helpers for section config settings later.
  $regional = [
    'first',
    'second',
    'third',
    'fourth',
  ];
  $w2d = [
    1 => 'one',
    2 => 'two',
    3 => 'three',
    4 => 'four',
  ];

  // Create and append sections to our $layout (section list).
  foreach ($sections_infos as $section_info) {
    // Catch broken section infos and put into a 'blank slate' section.
    $num_cols = (isset($section_info['num_columns'])) ? $section_info['num_columns'] : 1;

    // Determine column layout and create the text string.
    $formatter = (isset($w2d[$num_cols])) ? $w2d[$num_cols] : 'one';
    $layout_id = 'layout_'
      . $formatter
      . 'col';

    $col_width_str = sitenow_p2lb_multicol_settings($section_info['col_widths']);
    $layout_settings = [
      'label' => $section_title,
      'column_widths' => $col_width_str,
      'layout_builder_styles_style' => $section_styles,
    ];
    $section_array = sitenow_p2lb_create_section_array($layout_id, $layout_settings);

    // Iterate through the columns and attach the next paragraph in the list.
    for ($i = 0; $i < $num_cols; $i++) {
      // We might have more columns available than remaining paragraphs.
      if ($paragraph_iter >= count($paragraphs)) {
        break;
      }
      $key = $paragraph_keys[$paragraph_iter++];

      // Empty if the paragraph didn't process correctly.
      $block_config = sitenow_p2lb_process_paragraph($paragraphs[$key], $node);
      if (!empty($block_config)) {
        // Onecol uses 'content', rest use region for column placement.
        $region = ($num_cols == 1) ? 'content' : $regional[$i];
        $uuid = $block_config['uuid'];
        $config = $block_config['configuration'];
        $styles = $block_config['styles'];

        $section_array['components'][$uuid] = [
          'uuid' => $uuid,
          'region' => $region,
          'configuration' => $config,
          'additional' => [
            'layout_builder_styles_style' => $styles,
          ],
          'weight' => 0,
        ];
      }
    }
    $section = Section::fromArray($section_array);
    $layout->appendSection($section);
  }
  return $layout;
}

/**
 * Determine section layout_id.
 */
function sitenow_p2lb_determine_columns($col_widths) {
  $sections = [];

  $total_col_width = array_sum($col_widths);
  // Check if we wrap into additional sections.
  if ($total_col_width <= 12) {
    // Check for 'fluid' paragraphs, and set based on remaining space.
    $fluid_indices = array_keys($col_widths, 0, TRUE);
    if (!empty($fluid_indices)) {
      $repl = (12 - $total_col_width) / count($fluid_indices);
      // Roundoff to a valid repl value.
      if ($repl <= 3) {
        $repl = 3;
      }
      elseif ($repl <= 4) {
        $repl = 4;
      }
      elseif ($repl <= 6) {
        $repl = 6;
      }
      elseif ($repl <= 8) {
        $repl = 8;
      }
      elseif ($repl <= 9) {
        $repl = 9;
      }
      else {
        $repl = 12;
      }
      // Set the newly determined column widths.
      foreach ($fluid_indices as $index) {
        $col_widths[$index] = $repl;
      }
      // Reiter with the updated colwidths, in case they overrun the section.
      return sitenow_p2lb_determine_columns($col_widths);
    }
    // If we're all good, then add the section info and return.
    else {
      $sections[] = [
        'num_columns' => count($col_widths),
        'col_widths' => $col_widths,
      ];
      return $sections;
    }
  }

  // Helpers, including a cya breaker.
  $iter_adder = 0;
  $i = 0;
  $breaker = 100;

  // Cycle through the columns and recurse where necessary.
  while (TRUE) {
    $iter_adder += $col_widths[$i];

    // Out of cols to add Take what we have and handle/add to the list.
    if ($i == count($col_widths) - 1) {
      $sections[] = [
        'num_columns' => count($col_widths),
        'col_widths' => $col_widths,
      ];
      break;
    }

    // Section full. Take what we have and add to the list.
    if ($iter_adder == 12) {
      $sections = array_merge(
        sitenow_p2lb_determine_columns(array_slice($col_widths, 0, ++$i)),
        sitenow_p2lb_determine_columns(array_slice($col_widths, $i))
      );
      break;
    }

    // Overrun of the section. Split and handle separately.
    if ($iter_adder > 12) {
      $sections = array_merge(
        sitenow_p2lb_determine_columns(array_slice($col_widths, 0, $i)),
        sitenow_p2lb_determine_columns(array_slice($col_widths, $i)),
      );
      break;
    }

    // Extra cya check to break loop if something went wrong.
    if ($breaker-- <= 0) {
      break;
    }

    $i++;
  }

  return $sections;
}

/**
 * Process individual paragraph.
 */
function sitenow_p2lb_process_paragraph($paragraph, $node) {
  if (empty($paragraph)) {
    return [];
  }

  $display_label = 0;

  // Initialize a usage controller for later.
  $database = \Drupal::database();
  $use_controller = new InlineBlockUsage($database);

  // Handle each type of paragraph separately.
  switch ($paragraph->get('type')->getString()) {
    // Paragraph types that yet need mapping.
    case 'section':
    case 'featured_content':
      break;

    case 'accordion':
      $type = 'uiowa_collection';
      $styles = [];
      $label = 'Accordion collection';
      $display_label = 0;
      $view_mode = 'accordion';
      $accordion_items = $paragraph->get('field_accordion_item');
      $children = [];
      foreach ($accordion_items as $accordion_item) {
        $accordion_paragraph = $paragraph->load($accordion_item->target_id);
        $body = $accordion_paragraph->get('field_accordion_item_body')->getValue()[0];
        $title = $accordion_paragraph->get('field_accordion_item_title')->getString();
        $child = $paragraph->create([
          'langcode' => 'en',
          'type' => 'uiowa_collection_item',
          'status' => 1,
          // @todo parent_id (block) should be added here.
          'parent_type' => 'block_content',
          'parent_field_name' => 'field_uiowa_collection_items',
          'field_collection_body' => $body,
          'field_collection_headline' => $title,
        ]);
        if ($child->save()) {
          $children[] = $child;
        }
      }
      $block = \Drupal::entityTypeManager()
        ->getStorage('block_content')
        ->create([
          'type' => $type,
          'langcode' => 'en',
          'status' => $paragraph->get('status')->getValue(),
          'reusable' => 0,
          'default_langcode' => 1,
          'field_uiowa_collection_items' => $children,
        ]);
      break;

    case 'accordion_item':
      // Skip--handled by the parent accordion.
      break;

    case 'articles':
    case 'events':
    case 'people':
      // @todo Create these view-based blocks.
      break;

    case 'blockquote':
      $type = 'uiowa_text_area';
      $styles = [];
      // @todo update labeling methodology and decide how to title.
      $label = 'Text block';
      $display_label = 0;
      $text = $paragraph->get('field_blockquote_content')->getValue()[0];
      $text['value'] = '<blockquote>' . $text['value'] . '</blockquote>';
      $text['format'] = 'minimal';
      $blockquote_footer = ($paragraph->get('field_blockquote_footer')->getValue()) ?
        $paragraph->get('field_blockquote_footer')[0]->getValue()['value'] . ' ' : '';
      $blockquote_citation = ($paragraph->get('field_blockquote_cite')->getValue()) ?
        $paragraph->get('field_blockquote_cite')[0]->getValue() : [];
      if (!empty($blockquote_citation)) {
        $citation_link = '<cite><a href="' . $blockquote_citation['uri'] . '">';
        if (isset($blockquote_citation['title'])) {
          $citation_link = $citation_link . $blockquote_citation['title'] . '</a></cite>';
        }
        else {
          $citation_link = $citation_link . $blockquote_citation['uri'] . '</a></cite>';
        }
      }
      else {
        $citation_link = '';
      }
      if ($blockquote_footer || $citation_link) {
        $text['value'] = $text['value']
          . '<p>'
          . $blockquote_footer . $citation_link
          . '</p>';
      }

      $block = \Drupal::entityTypeManager()
        ->getStorage('block_content')
        ->create([
          'type' => $type,
          'langcode' => 'en',
          'status' => $paragraph->get('status')->getValue(),
          'reusable' => 0,
          'default_langcode' => 1,
          // getValue sets both the text value and the format.
          'field_uiowa_text_area' => $text,
        ]);
      break;

    case 'card':
      $type = 'uiowa_card';
      $styles = [
        'block_background_style_light',
        'card_image_large',
        'card_media_position_stacked',
        'content_alignment_left',
        'media_format_widescreen',
      ];

      // Image isn't required. Check for one, or set to null.
      $image = ($paragraph->get('field_card_image')->getValue()) ?
        $paragraph->get('field_card_image')->getValue()[0]['target_id'] : '';

      // Link isn't required. Check for one, or set to null.
      $link = ($paragraph->get('field_card_link')->getValue()) ?
        $paragraph->get('field_card_link')->getValue()[0] : '';

      // Label (title) isn't required. Check for one, or set to null.
      $label = ($paragraph->get('field_card_title')->getValue()) ?
        $paragraph->get('field_card_title')->getString() : '';
      $display_label = ($label) ? 1 : 0;

      // Subtitle field isn't required. Check for one, or set to null.
      $subtitle = ($paragraph->get('field_card_subtitle')->getValue()) ?
        $paragraph->get('field_card_subtitle')->getString() : '';

      // Card body isn't required. Check or or set to array with empty value.
      $excerpt = ($paragraph->get('field_card_body')->getValue()) ?
        $paragraph->get('field_card_body')->getValue()[0] : [
          'value' => '',
          'format' => 'minimal',
        ];

      // If there was a subtitle, prepend it to the body text.
      // @todo This can be placed as the "Author" field.
      if ($subtitle) {
        $excerpt['value'] = '<p>' . $subtitle . '</p>' . $excerpt['value'];
      }

      $block = \Drupal::entityTypeManager()
        ->getStorage('block_content')
        ->create([
          'type' => $type,
          'langcode' => 'en',
          'status' => $paragraph->get('status')->getString(),
          'info' => 'Card',
          'reusable' => 0,
          'default_langcode' => 1,
          'field_uiowa_card_author' => [],
          'field_uiowa_card_excerpt' => $excerpt,
          'field_uiowa_card_image' => $image,
          'field_uiowa_card_link' => $link,
          'field_uiowa_card_title' => [
            // Size not set in paragraphs. Defaulting to h2. Can change later.
            'size' => 'h2',
            'text' => $label,
          ],
        ]);
      break;

    case 'carousel':
      $type = 'uiowa_slider';
      $styles = [];
      $label = $paragraph->get('field_uip_title')->getString();
      $display_label = $paragraph->get('field_uip_display_title')->getString();

      $block = \Drupal::entityTypeManager()
        ->getStorage('block_content')
        ->create([
          'type' => $type,
          'langcode' => 'en',
          'status' => 1,
          'reusable' => 0,
          'default_langcode' => 1,
          'metatag' => [],
          'field_collection_heading_size' => 'h2',
          'field_uiowa_slider_slides' => [],
        ]);
      $block->save();
      $parent_id = $block->get('id')->getString();
      $parent_slides_field = [];

      $carousel_image_ids = $paragraph->get('field_carousel_item')->getValue();
      // Grab the actual ids to pass to our loader.
      $carousel_image_ids = array_map(
        function ($arr) {
          return $arr['target_id'];
        }, $carousel_image_ids);

      $para_storage = \Drupal::service('entity_type.manager')
        ->getStorage('paragraph');
      $carousel_images = $para_storage->loadMultiple($carousel_image_ids);

      /** @var \Drupal\paragraphs\Entity\Paragraph $carousel_image */
      foreach ($carousel_images as $carousel_image) {
        $caption = $carousel_image->get('field_carousel_image_caption');

        if (!$caption->isEmpty()) {
          $caption = $caption->getValue()[0];

          // Grab the first complete text piece.
          if (preg_match('|\A<(.*?\d?)>(.*?)<\/.*?\d?>|', $caption['value'], $matches)) {
            // If it was an <h#> tag, grab it to set the proper level.
            if (substr($matches[1], 0, 1) === 'h') {
              $block->set('field_collection_heading_size', $matches[1])
                ->save();
            }
            // Grab the new headline, and pull it out of the rest of the content.
            $headline = $matches[2];
            $caption['value'] = str_replace(
              $matches[0],
              '',
              $caption['value']
            );
            // Only continue if we were able to create a headline.
            $image_fid = $carousel_image->get('field_carousel_image_image')->getString();
            $slide = $para_storage->create([
              'type' => 'uiowa_slide',
              'langcode' => 'en',
              'status' => 1,
              'parent_id' => $parent_id,
              'parent_type' => 'block_content',
              'parent_field_name' => 'field_uiowa_slider_slides',
              'default_langcode' => 1,
              'field_uiowa_slide_content' => $caption,
              'field_collection_headline' => $headline,
              'field_uiowa_slide_image' => $image_fid,
            ]);
            if ($slide->save()) {
              $parent_slides_field[] = [
                'target_id' => $slide->get('id')->getString(),
                'target_revision_id' => $slide->get('revision_id')->getString(),
              ];
            };
          }
        }
      }
      $block->set('field_uiowa_slider_slides', $parent_slides_field)
        ->save();
      break;

    case 'carousel_image':
      // We can skip this. Carousel images are handled in the carousel parent.
      break;

    case 'image_gallery':
      // @todo Create an image gallery block.
      break;

    case 'text':
      $type = 'uiowa_text_area';
      $styles = sitenow_p2lb_section_styles($paragraph);
      // @todo update labeling methodology and decide how to title.
      $label = 'Text block';
      $display_label = 0;
      $text = $paragraph->get('field_text_body')->getValue();

      // @todo While we're already processing this text block,
      //   do we want to also check and see if it starts with a
      //   title and set a headline from it then strip that from
      //   the field?
      $block = \Drupal::entityTypeManager()
        ->getStorage('block_content')
        ->create([
          'type' => $type,
          'langcode' => 'en',
          'status' => $paragraph->get('status')->getValue(),
          'reusable' => 0,
          'default_langcode' => 1,
          // getValue sets both the text value and the format.
          'field_uiowa_text_area' => $text,
        ]);
      break;

    case 'webform':
      $webform_data = $paragraph->get('field_webform')->getValue()[0];
      if ($paragraph->get('field_uip_title')->getValue()) {
        $label = $paragraph->get('field_uip_title')->getValue()[0]['value'];
        $display_label = 1;
      }
      else {
        $label = 'Webform';
        $display_label = 0;
      }

      // Get the webform's uuid.
      $webform_manager = \Drupal::entityTypeManager()
        ->getStorage('webform');
      $webform = $webform_manager->loadByProperties(['id' => $webform_data['target_id']]);
      $uuid = $webform[$webform_data['target_id']]->get('uuid');

      $config = [
        'id' => 'webform_block',
        'provider' => 'webform',
        'label' => $label,
        'label_display' => $display_label,
        'redirect' => 0,
        'default_data' => $webform_data['default_data'],
        'webform_id' => $webform_data['target_id'],
      ];

      // Can skip the followup, because no block needs to be created.
      return [
        'configuration' => $config,
        'uuid' => $uuid,
        'styles' => [],
      ];

    default:

  }
  // If we have a block save it, and check that it saved succesfully.
  $view_mode = isset($view_mode) ? $view_mode : '';
  if (isset($block) && $block->save()) {
    $uuid = $block->get('uuid')->getValue()[0]['value'];
    $config = [
      'id' => 'inline_block:' . $type,
      'label' => $label,
      'provider' => 'layout_builder',
      'label_display' => $display_label,
      'block_revision_id' => $block->getRevisionId(),
      'view_mode' => $view_mode,
    ];

    // Set the block usage to the node.
    $use_controller->addUsage($block->id(), $node);

    // @todo make sure styles is set before this for all block types.
    $styles = isset($styles) ? $styles : [];
    return [
      'configuration' => $config,
      'uuid' => $uuid,
      'styles' => $styles,
    ];
  }

  // No block was successfully created.
  return [];
}

/**
 * Removes all attached paragraphs from a node.
 */
function sitenow_p2lb_remove_attached_paragraphs($nid) {
  $node = \Drupal::service('entity_type.manager')
    ->getStorage('node')
    ->load($nid);
  $section_ids = sitenow_p2lb_fetch_child_ids($node);

  // Grab paragraphs attached to each of the given sections.
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['id'])
    ->condition('parent_id', $section_ids, 'in')
    ->condition('parent_field_name', 'field_section_content_block', '=');
  $child_ids = $query->execute()->fetchCol();

  // Gather all ids. Children first, then the parents (harsh!).
  $ids = array_merge($child_ids, $section_ids);

  // Load all paragraphs by id, and delete each.
  $paragraphs = \Drupal::service('entity_type.manager')
    ->getStorage('paragraph')
    ->loadMultiple($ids);
  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }
}

/**
 * Simple helper to create a section array.
 */
function sitenow_p2lb_create_section_array($layout_id, $layout_settings) {
  $section_array = [
    'layout_id' => $layout_id,
    'components' => [],
    'layout_settings' => $layout_settings,
  ];

  return $section_array;
}

/**
 * Choose multi-col column settings.
 */
function sitenow_p2lb_multicol_settings($col_widths) {
  $settings = '';

  // Different multi-cols have different options to choose from.
  switch (count($col_widths)) {
    case 2:
      // Helper variable to determine the layout options.
      $options = [
        3 => '25-75',
        4 => '33-67',
        6 => '50-50',
        8 => '67-33',
        9 => '75-25',
      ];
      // Check the first column and use to determine the split.
      $picker = $col_widths[0];
      if (in_array($picker, $options)) {
        $settings = $options[$picker];
      }
      // Default to a 50-50 split if anything went wrong.
      else {
        $settings = $options[6];
      }
      break;

    case 3:
      // If first col is half width, others are 25.
      if ($col_widths[0] == 6) {
        $settings = '50-25-25';
      }
      // First col is 25, then two options are available.
      elseif ($col_widths[0] == 3) {
        // Check the middle col to determine which gets the 50.
        if ($col_widths[1] == 3) {
          $settings = '25-25-50';
        }
        else {
          $settings = '25-50-25';
        }
      }
      // If anything went wrong, or didn't match, default to even thirds.
      else {
        $settings = '33-34-33';
      }
      break;

    case 1:
    case 4:
    default:
      break;
  }
  return $settings;
}

/**
 * Match paragraphs section styles to lb section styles.
 */
function sitenow_p2lb_section_styles($section_object) {
  $paragraph_styles = $section_object
    ->get('field_uip_classes')
    ->getValue();

  $style_matcher = [
    'bg-light' => 'section_background_style_gray',
    'bg-dark' => 'section_background_style_gray',
    'bg-black' => 'section_background_style_black',
    'bg-yellow' => 'section_background_style_gold',
    'pt-5' => 'section_padding_top_extra',
    'pb-5' => 'section_padding_bottom_extra',
  ];
  $styles = [];

  foreach ($paragraph_styles as $paragraph_style) {
    $style_string = $paragraph_style['value'];
    if (isset($style_matcher[$style_string])) {
      $styles[$style_matcher[$style_string]] = $style_matcher[$style_string];
    }
  }
  return $styles;
}

/**
 * Creates an lb section for paragraphs section background image.
 */
function sitenow_p2lb_section_image($section_image_fid, $banner_text, $node) {
  $section_array = [];

  $text = (!is_null($banner_text)) ? $banner_text->get('field_text_body')->getValue()[0] : [
    'value' => '',
    'format' => NULL,
  ];

  $h_level = 'h2';
  $title = '';

  // Check if the text begins with an <h#> tag.
  if (preg_match('|\A<(h\d)>(.*?)<\/h\d>|', $text['value'], $matches)) {
    $h_level = $matches[1];
    $title = $matches[2];
    $text['value'] = str_replace(
      $matches[0],
      '',
      $text['value']
    );
  }

  $link = NULL;
  // Check if a link is present, and extract info.
  // (Content)(Full link content (HREF))(Other content).
  // Assumes only one button or link is present.
  // Any more links will remain in the body.
  if (preg_match('|(.*?)(<a.*?href="(.*?)".*?>(.*?)<\/a>)(.*)|is', $text['value'], $matches)) {
    // Attach the bookended content into a single value.
    $text['value'] = $matches[1] . $matches[5];
    // Set URI based on link being absolute or relative.
    $uri = (substr($matches[3], 0, 4) === 'http') ?
      $matches[3] : \Drupal::request()->getSchemeAndHttpHost() . $matches[3];
    // Construct an appropriate link field.
    $link = [
      'uri' => $uri,
      'title' => strip_tags($matches[4]),
      'options' => [],
    ];
  }

  // Banner only allows up to minimal. Change if needed.
  $text['format'] = ($text['format'] === 'filtered_html') ?
    'minimal' : $text['format'];

  $block = \Drupal::entityTypeManager()
    ->getStorage('block_content')
    ->create([
      'type' => 'uiowa_banner',
      'langcode' => 'en',
      'status' => 1,
      'reusable' => 0,
      'default_langcode' => 1,
      'field_uiowa_banner_excerpt' => $text,
      'field_uiowa_banner_image' => $section_image_fid,
      'field_uiowa_banner_title' => [
        'size' => $h_level,
        'text' => $title,
      ],
      'field_uiowa_banner_link' => $link,
    ]);
  // If we have a block save it, and check that it saved succesfully.
  if (isset($block) && $block->save()) {
    // Create the config that will be used to set the block in its section.
    $uuid = $block->get('uuid')->getValue()[0]['value'];
    $block_config = [
      'id' => 'inline_block:uiowa_banner',
      'label' => 'Hero',
      'provider' => 'layout_builder',
      'label_display' => 0,
      'block_revision_id' => $block->getRevisionId(),
      'view_mode' => 'full',
    ];
    if (!empty($block_config)) {
      $layout_settings = [
        'label' => 'Hero image',
        'column_widths' => [],
        'layout_builder_styles_style' => [
          'section_margin_edge_to_edge' => 'section_margin_edge_to_edge',
        ],
      ];
      $section_array = sitenow_p2lb_create_section_array('layout_onecol', $layout_settings);
      $section_array['components'][$uuid] = [
        'uuid' => $uuid,
        'region' => 'content',
        'configuration' => $block_config,
        'additional' => [
          'layout_builder_styles_style' => [
            'image',
            'banner_centered',
            'banner_medium',
            'headline_bold_serif',
          ],
        ],
        'weight' => 0,
      ];
    }

    // Update the block usage to the node.
    $database = \Drupal::database();
    $use_controller = new InlineBlockUsage($database);
    $use_controller->addUsage($block->id(), $node);

  }
  return $section_array;
}
