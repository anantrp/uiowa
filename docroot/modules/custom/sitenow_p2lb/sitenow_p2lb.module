<?php

/**
 * @file
 * Contains sitenow_p2lb.module.
 */

use Drupal\Core\Database\Database;
use Drupal\layout_builder\Section;

/**
 * Check for nodes which are using paragraphs.
 */
function sitenow_p2lb_paragraph_nodes() {
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['parent_id'])
    ->condition('parent_type', 'node', '=');
  $result = $query->distinct()
    ->execute()
    ->fetchCol();
  // @todo Paragraphs used for lb collections need to be filtered out.
  return $result;
}

/**
 * Convert a node from paragraphs to layout builder.
 */
function sitenow_p2lb_node_p2lb($nid) {
  $node = \Drupal::service('entity_type.manager')
    ->getStorage('node')
    ->load($nid);
  // Get sections from the page.
  $section_ids = sitenow_p2lb_fetch_section_ids($nid);
  $layout = $node->get('layout_builder__layout');
  foreach ($section_ids as $section_id) {
    $layout = sitenow_p2lb_process_section($section_id, $layout);
  }
  // Need to set with an array of sections, retrieved with getSections().
  $node->set('layout_builder__layout', $layout->getSections())
    ->save();
}

/**
 * Fetch all section paragraph ids attached to a node.
 */
function sitenow_p2lb_fetch_section_ids($nid) {
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['id'])
    ->condition('parent_type', 'node', '=')
    ->condition('parent_id', $nid, '=');
  $section_ids = $query->distinct()
    ->execute()
    ->fetchCol();
  return $section_ids;
}

/**
 * Process paragraphs section.
 */
function sitenow_p2lb_process_section($section_id, $layout) {
  $para_storage = \Drupal::service('entity_type.manager')
    ->getStorage('paragraph');

  // Grab section title.
  $section_object = $para_storage->load($section_id);
  $section_title = ($section_object->get('field_section_title')[0]) ?
    $section_object->get('field_section_title')[0]->getValue()['value'] : '';

  // Get ids for all paragraphs attached to this section.
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['id'])
    ->condition('parent_id', $section_id, '=')
    ->condition('parent_field_name', 'field_section_content_block', '=');
  $pids = $query->execute()->fetchCol();

  $paragraphs = $para_storage->loadMultiple($pids);

  // Widths are set at the paragraph level. Grab our column widths.
  $col_widths = [];
  foreach ($paragraphs as $paragraph) {
    $col_str = $paragraph->get('field_uip_colwidth')->getString();
    // 'Fluid' paragraph will be a col_width of 0.
    $col_widths[] = (int) preg_replace('|[^0-9]|', '', $col_str);
  }

  $sections_infos = sitenow_p2lb_determine_columns($col_widths);

  // Helpers for iterating through paragraphs later.
  $paragraph_iter = 0;
  $paragraph_keys = array_keys($paragraphs);

  // Helpers for section config settings later.
  $regional = [
    'first',
    'second',
    'third',
    'fourth',
  ];
  $w2d = [
    1 => 'one',
    2 => 'two',
    3 => 'three',
    4 => 'four',
  ];

  // Create and append sections to our $layout (section list).
  foreach ($sections_infos as $section_info) {
    // Catch broken section infos and put into a 'blank slate' section.
    $num_cols = (isset($section_info['num_columns'])) ? $section_info['num_columns'] : 1;

    // Determine column layout and create the text string.
    $formatter = (isset($w2d[$num_cols])) ? $w2d[$num_cols] : 'four';
    $layout_id = 'layout_'
      . $formatter
      . 'col';

    $col_width_str = sitenow_p2lb_multicol_settings($section_info['col_widths']);
    $layout_settings = [
      'label' => $section_title,
      'column_widths' => $col_width_str,
      'layout_builder_styles_style' => [],
    ];
    $section_array = sitenow_p2lb_create_section_array($layout_id, $layout_settings);

    // Iterate through the columns and attach the next paragraph in the list.
    for ($i = 0; $i < $num_cols; $i++) {
      // We might have more columns available than remaining paragraphs.
      if ($paragraph_iter >= count($paragraphs)) {
        break;
      }
      $key = $paragraph_keys[$paragraph_iter++];

      // Empty if the paragraph didn't process correctly.
      $block_config = sitenow_p2lb_process_paragraph($paragraphs[$key]);
      if (!empty($block_config)) {
        // Onecol uses 'content', rest use region for column placement.
        $region = ($num_cols == 1) ? 'content' : $regional[$i];
        $uuid = $block_config['uuid'];
        $config = $block_config['configuration'];

        $section_array['components'][$uuid] = [
          'uuid' => $uuid,
          'region' => $region,
          'configuration' => $config,
          'additional' => [],
          'weight' => 0,
        ];
      }
    }
    $section = Section::fromArray($section_array);
    $layout->appendSection($section);
  }
  return $layout;
}

/**
 * Determine section layout_id.
 */
function sitenow_p2lb_determine_columns($col_widths) {
  $sections = [];

  $total_col_width = array_sum($col_widths);
  // Check if we wrap into additional sections.
  if ($total_col_width <= 12) {
    // Check for 'fluid' paragraphs, and set based on remaining space.
    $fluid_indices = array_keys($col_widths, 0, TRUE);
    if (!empty($fluid_indices)) {
      $repl = (12 - $total_col_width) / count($fluid_indices);
      // Roundoff to a valid repl value.
      if ($repl <= 3) {
        $repl = 3;
      }
      elseif ($repl <= 4) {
        $repl = 4;
      }
      elseif ($repl <= 6) {
        $repl = 6;
      }
      elseif ($repl <= 8) {
        $repl = 8;
      }
      elseif ($repl <= 9) {
        $repl = 9;
      }
      else {
        $repl = 12;
      }
      // Set the newly determined column widths.
      foreach ($fluid_indices as $index) {
        $col_widths[$index] = $repl;
      }
      // Reiter with the updated colwidths, in case they overrun the section.
      sitenow_p2lb_determine_columns($col_widths);
    }
    // If we're all good, then add the section info and return.
    $sections[] = ['num_columns' => count($col_widths), 'col_widths' => $col_widths];
    return $sections;
  }

  // Helpers, including a cya breaker.
  $iter_adder = 0;
  $i = 0;
  $breaker = 100;

  while (TRUE) {
    $iter_adder += $col_widths[$i];

    // Overrun of the section. Split and handle separately.
    if ($iter_adder > 12) {
      $sections = array_merge($sections,
        sitenow_p2lb_determine_columns(array_slice($col_widths, 0, $i)),
        sitenow_p2lb_determine_columns(array_slice($col_widths, $i)),
      );
      $iter_adder = 0;
    }

    // Out of columns. Take what we have and handle/add to the list.
    if ($i == count($col_widths) - 1) {
      $sections = array_merge($sections,
        sitenow_p2lb_determine_columns(array_slice($col_widths, $i))
      );
      break;
    }

    // Extra cya check to break loop if something went wrong.
    if ($breaker-- <= 0) {
      break;
    }

    $i++;
  }

  return $sections;
}

/**
 * Process individual paragraph.
 */
function sitenow_p2lb_process_paragraph($paragraph) {
  if (empty($paragraph)) {
    return [];
  }

  // Handle each type of paragraph separately.
  switch ($paragraph->get('type')->getString()) {
    // Paragraph types that yet need mapping.
    case 'section':
    case 'accordion':
    case 'accordion_item':
    case 'blockquote':
    case 'image_gallery':
    case 'webform':
    case 'featured_content':
    case 'carousel':
    case 'carousel_image':
      break;

    case 'text':
      // @todo This needs to be checked/extended/cleaned up
      $type = 'uiowa_text_area';
      // @todo update labeling methodology and decide how to title.
      $label = 'title';
      $block = \Drupal::entityTypeManager()
        ->getStorage('block_content')
        ->create([
          'type' => 'uiowa_text_area',
          'langcode' => 'en',
          'status' => $paragraph->get('status')->getValue(),
          // 'info' looks like 'title' field in lb?
          'reusable' => 0,
          'default_langcode' => 1,
          // getValue sets both the text value and the format.
          'field_uiowa_text_area' => $paragraph->get('field_text_body')->getValue(),
        ]);
      break;

    case 'card':
      // @todo This needs to be checked/extended/cleaned up
      $type = 'uiowa_card';
      // Image isn't required. Check for one, or set to null.
      $image = ($paragraph->get('field_card_image')->getValue()) ?
        $paragraph->get('field_card_image')->getValue()[0]['target_id'] : '';

      // Link isn't required. Check for one, or set to null.
      $link = ($paragraph->get('field_card_link')->getValue()) ?
        $paragraph->get('field_card_link')->getValue()[0] : '';

      // Label (title) isn't required. Check for one, or set to null.
      $label = ($paragraph->get('field_card_title')->getValue()) ?
        $paragraph->get('field_card_title')->getString() : '';

      // Subtitle field isn't required. Check for one, or set to null.
      $subtitle = ($paragraph->get('field_card_subtitle')->getValue()) ?
        $paragraph->get('field_card_subtitle')->getString() : '';

      // Get body field isn't required or set to array with empty value.
      $excerpt = ($paragraph->get('field_card_body')->getValue()) ?
        $paragraph->get('field_card_body')->getValue() : ['value' => '', 'format' => 'minimal'];

      // If there was a subtitle, prepend it to the body text.
      if ($subtitle) {
        $excerpt['value'] = '<p>' . $subtitle . '</p>' . $excerpt['value'];
      }

      $block = \Drupal::entityTypeManager()
        ->getStorage('block_content')
        ->create([
          'type' => 'uiowa_card',
          'langcode' => 'en',
          'status' => $paragraph->get('status')->getString(),
          'info' => 'Card',
          'reusable' => 0,
          'default_langcode' => 1,
          'field_uiowa_card_author' => [],
          'field_uiowa_card_excerpt' => $excerpt,
          'field_uiowa_card_image' => $image,
          'field_uiowa_card_link' => $link,
          'field_uiowa_card_title' => [
            // Size not set in paragraphs. Defaulting to h2. Can change later.
            'size' => 'h2',
            'text' => $label,
          ],
        ]);
      break;

    default:

  }
  // If we have a block save it, and check that it saved succesfully.
  if (isset($block) && $block->save()) {
    // Create the config that will be used to set the block in its section.
    $uuid = $block->get('uuid')->getValue()[0]['value'];
    $config = [
      'id' => 'inline_block:' . $type,
      'label' => $label,
      'provider' => 'layout_builder',
      // @todo update labeling methodology. Defaulting to visible for now.
      'label_display' => 1,
      'block_revision_id' => $block->getRevisionId(),
      'view_mode' => '',
    ];
    return [
      'configuration' => $config,
      'uuid' => $uuid,
    ];
  }
  // No block was successfully created.
  return [];
}

/**
 * Removes all attached paragraphs from a node.
 */
function sitenow_p2lb_remove_attached_paragraphs($nid) {

  $section_ids = sitenow_p2lb_fetch_section_ids($nid);

  // Grab paragraphs attached to each of the given sections.
  $connection = Database::getConnection();
  $query = $connection->select('paragraphs_item_field_data', 'pifd');
  $query->fields('pifd', ['id'])
    ->condition('parent_id', $section_ids, 'in')
    ->condition('parent_field_name', 'field_section_content_block', '=');
  $child_ids = $query->execute()->fetchCol();

  // Gather all ids. Children first, then the parents (harsh!).
  $ids = array_merge($child_ids, $section_ids);

  // Load all paragraphs by id, and delete each.
  $paragraphs = \Drupal::service('entity_type.manager')
    ->getStorage('paragraph')
    ->loadMultiple($ids);
  foreach ($paragraphs as $paragraph) {
    $paragraph->delete();
  }
}

/**
 * Simple helper to create a section array.
 */
function sitenow_p2lb_create_section_array($layout_id, $layout_settings) {
  $section_array = [
    'layout_id' => $layout_id,
    'components' => [],
    'layout_settings' => $layout_settings,
  ];

  return $section_array;
}

/**
 * Choose multi-col column settings.
 */
function sitenow_p2lb_multicol_settings($col_widths) {
  $settings = '';

  // Different multi-cols have different options to choose from.
  switch (count($col_widths)) {
    case 2:
      // Helper variable to determine the layout options.
      $options = [
        3 => '25-75',
        4 => '33-67',
        6 => '50-50',
        8 => '67-33',
        9 => '75-25',
      ];
      // Check the first column and use to determine the split.
      $picker = $col_widths[0];
      if (in_array($picker, $options)) {
        $settings = $options[$picker];
      }
      // Default to a 50-50 split if anything went wrong.
      else {
        $settings = $options[6];
      }
      break;

    case 3:
      // If first col is half width, others are 25.
      if ($col_widths[0] == 6) {
        $settings = '50-25-25';
      }
      // First col is 25, then two options are available.
      elseif ($col_widths[0] == 3) {
        // Check the middle col to determine which gets the 50.
        if ($col_widths[1] == 3) {
          $settings = '25-25-50';
        }
        else {
          $settings = '25-50-25';
        }
      }
      // If anything went wrong, or didn't match, default to even thirds.
      else {
        $settings = '33-34-33';
      }
      break;

    case 1:
    case 4:
    default:
      break;
  }
  return $settings;
}
