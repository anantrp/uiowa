<?php

/**
 * @file
 * Provides basic entity types for standard sites.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function entity_types_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.entity_types':
      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($filepath);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }

      /* @var \Drupal\Core\Extension\ModuleHandler $moduleHandler*/
      $moduleHandler = \Drupal::service('module_handler');
      if ($moduleHandler->moduleExists('markdown')) {
        $filters = $moduleHandler->invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_page_attachments().
 */
function entity_types_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'entity_types/entity_types_styling';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function entity_types_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = 'entity_types_form_entity_view_display_edit_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function entity_types_form_layout_builder_disable_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'entity_types_layout_builder_disable_form_submit';
}

/**
 * Submit handler for when layout builder is enabled/disabled.
 */
function entity_types_form_entity_view_display_edit_form_submit(array $form, FormStateInterface $form_state) {
  $enabled = $form_state->getValue(['layout', 'enabled']);

  // If $enabled = 0, we return early because there is
  // an additional form submission that happens when
  // you confirm that layout builder should be disabled
  // and this submit handler will be triggered by that.
  // Also return early if the value of $enabled hasn't
  // changed.
  if ($enabled === 0) {
    return;
  }

  $entity_type = $form['#entity_type'];
  $bundle = $form['#bundle'];

  // Load the install file.
  module_load_install('entity_types');

  entity_types_layout_builder_block_visibility_helper($enabled, $bundle);
}

function entity_types_layout_builder_disable_form_submit(array $form, FormStateInterface $form_state) {
  $entity_type = 'node';
  $bundle = \Drupal::routeMatch()->getParameter('node_type');

  // Only proceed if we have a bundle.
  // @todo Do we need more validation here?
  if (isset($bundle)) {
    // Load the install file.
    module_load_install('entity_types');

    // Enabling is always 0 in this case.
    entity_types_layout_builder_block_visibility_helper(0, $bundle);
  }
}
