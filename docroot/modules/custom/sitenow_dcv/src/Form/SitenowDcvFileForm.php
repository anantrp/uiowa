<?php

namespace Drupal\sitenow_dcv\Form;

use Drupal\Core\Entity\EntityStorageInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * File upload form for domain control validation.
 */
class SitenowDcvFileForm extends FormBase {
  /**
   * The file system service.
   *
   * @var \Drupal\Core\File\FileSystemInterface
   */
  protected $fileSystem;

  /**
   * The messenger service.
   *
   * @var \Drupal\Core\Messenger\MessengerInterface
   */
  protected $messenger;

  /**
   * The entity storage service.
   *
   * @var \Drupal\Core\Entity\EntityStorageInterface
   */
  protected $entityStorage;

  /**
   * SitenowDcvFileForm constructor.
   *
   * @param \Drupal\Core\File\FileSystemInterface $fileSystem
   *   The file system service.
   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
   *   The messenger service.
   * @param \Drupal\Core\Entity\EntityStorageInterface $entityStorage
   *   The entity storage service.
   */
  public function __construct(FileSystemInterface $fileSystem, MessengerInterface $messenger, EntityStorageInterface $entityStorage) {
    $this->fileSystem = $fileSystem;
    $this->messenger = $messenger;
    $this->entityStorage = $entityStorage;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('file_system'),
      $container->get('messenger'),
      $container->get('entity_type.manager')->getStorage('file')
    );
  }

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'sitenow_dcv_settings';
  }

  /**
   * {@inheritdoc}
   */
  public function getEditableConfigNames() {
    return 'sitenow_dcv.settings';
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    global $base_url;

    $form['markup'] = [
      '#type' => 'markup',
      '#markup' => $this->t('This form provides a file upload for domain control validation. The file should be generated by CertManager when selecting the HTTPS DCV method. Once uploaded, you can submit the DCV request for processing. Please delete the file once DCV is complete.'),
    ];

    $form['file'] = [
      '#type' => 'file',
      '#title' => $this->t('File'),
    ];

    $form['submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Submit'),
    ];

    // If it is not set, config::get() defaults to NULL.
    if ($current = \Drupal::config('sitenow_dcv.settings')->get('dcv_file')) {
      $form['file']['#description'] = $this->t('The hash file to upload. Currently set to <a href="@path">@file</a>.', [
        '@path' => $base_url . '/.well-known/pki-validation/' . $current,
        '@file' => $current,
      ]);

      $form['delete'] = [
        '#type' => 'submit',
        '#value' => $this->t('Delete'),
        '#submit' => ['::delete'],
      ];
    }
    else {
      $form['file']['#description'] = $this->t('The hash file to upload. The file name will be converted to uppercase automatically');
    }

    return $form;
  }

  /**
   * Delete submit handler.
   */
  public function delete(&$form, $form_state) {
    if ($this->fileSystem->deleteRecursive("public://dcv/")) {
      \Drupal::configFactory()->getEditable('sitenow_dcv.settings')
        ->set('dcv_file', NULL)
        ->save();
      $this->messenger->addMessage($this->t('Deleted successfully.'));
    }
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(&$form, $form_state) {
    $dir = 'public://dcv/';
    $this->fileSystem->deleteRecursive($dir);
    $this->fileSystem->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY);

    /** @var \Drupal\file\FileInterface $file */
    $file = file_save_upload('file', [
      'file_validate_is_file' => [],
      'file_validate_extensions' => [
        'txt',
      ],
    ],
    FALSE,
    0,
    FileSystemInterface::EXISTS_REPLACE
    );

    if ($file) {
      // Ensure the filename is uppercase since DCV is case-sensitive.
      $info = pathinfo($file->getFileUri());
      $filename = strtoupper($info['filename']) . '.' . $info['extension'];
      $form_state->set('file', $file);
      $form_state->set('dcv_file', $filename);

      if ($this->fileSystem->copy($file->getFileUri(), $dir . $filename) === FALSE) {
        $form_state->setErrorByName('file', $this->t("Failed to write the uploaded file to the site's file folder."));
      }
    }
    else {
      $form_state->setErrorByName('file', $this->t('No file was uploaded.'));
    }
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(&$form, $form_state) {
    if ($form_state->get('file')) {
      $this->entityStorage->delete([$form_state->get('file')]);
      $form_state->set('file', NULL);
    }

    $filename = $form_state->get('dcv_file');
    \Drupal::configFactory()->getEditable('sitenow_dcv.settings')
      ->set('dcv_file', $filename)
      ->save();

    $this->messenger->addMessage($this->t('Uploaded @file successfully.', [
      '@file' => $filename,
    ]));
  }

}
